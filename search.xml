<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RESTful API见解</title>
    <url>/2020/04/12/RESTful/</url>
    <content><![CDATA[<p>本文转自知乎<a href="https://www.zhihu.com/people/xing-jiankuan" target="_blank" rel="noopener">大宽宽</a>的回答  原文：<a href="https://www.zhihu.com/question/28570307" target="_blank" rel="noopener">WEB开发中，使用JSON-RPC好，还是RESTful API好？</a></p>
<a id="more"></a>
<p>简单来说：不管哪个“好”还是不“好”，RESTful API在很多实际项目中并不使用。因此真的做了项目，你可能会发现只能用HTTP+JSON来定义接口，无法严格遵守REST风格。</p>
<p>为什么说不实际呢？因为这个风格太理想化了，比方说：</p>
<ul>
<li>REST要求要将接口以资源的形式呈现。但实际上，很多时候都不太可能将一些业务逻辑看作资源。即使强制这么干了，也会非常非常别扭。登录就是登录，而不是“创建一个session”；播放音乐就是播放，而不是“创建一个播放状态“。</li>
</ul>
<blockquote>
<p>我们之所以要定义接口，本身的动机是做一个抽象，把复杂性隐藏起来，而绝对不是把内部的实现细节给暴露出去。REST却反其道而行之，要求实现应该是“资源”并且这个实现细节要暴露在接口的形式上。  </p>
<p>但一个好的接口设计就应该是简单、直观的，能够完全隐藏内部细节的，不管底层是不是资源，资源的组合还是别的什么架构。此外，让业务逻辑与接口表现一致，对系统的长期维护和演进都有极大的好处。</p>
</blockquote>
<ul>
<li>REST只提供了增删改查的基本语义，其他的语义基本上不管。比如批量添加，批量删除，修改一个资源的一部分字段。区分“物理删除”和“标记删除”等等。复杂的查询更加不显示，对于像筛选这类的场景，REST明显就是个渣。这里要表扬一下GraphQL（但GraphQL有其他的问题，在此不展开）</li>
<li>REST建议用HTTP的status code做错误码，以便于“统一”，实际上这非常难统一。各种业务的含义五花八门，抽象层次高低不齐，根本就无法满足需要。比如一个404到底是代表这个接口找不到，还是代表一个资源找不到。400表达请求有问题，但是我想提示用户“你登录手机号输入的格式不对“，还是“你登录手机号已经被占用了“。既然201表示“created”，为啥deleted和updated没有对应的status code，只能用200或者204（no content）？错误处理是web系统里最麻烦的，最需要细心细致的地方。REST风格在这里只能添乱。</li>
<li>web请求参数可能散布在url path、querystring、body、header。服务器端处理对此完全没有什么章法。客户端和服务器端的研发之间还是要做约定。</li>
<li>在url path上的变量会对很多其他的工作带来不良影响。</li>
</ul>
<blockquote>
<p>比如监控，本来url可以作为一个接口的key统计次数/延迟，结果url里出了个变量，所以自动收集nginx的access log，自动做监控项目增加就没法弄了。<br>再比如，想对接口做流量控制的计数，本来url可以做key，因为有变量，就得多费点事才行。</p>
</blockquote>
<ul>
<li>现实中接口要处理的真正的问题，REST基本上也没怎么管。比如认证、授权、流控、数据缓存（http的etag还起了点作用）、超时控制、数据压缩……。</li>
<li>REST有很多好的工具可以便利的生成对应的代码和文档，也容易形成规范。但问题是REST在实际的项目中并没有解决很多问题，也在很多时候不合用，因此产生的代码和文档也就没什么用，必须经过二次加工才能真的用起来。因此可以基于REST+你的业务场景定义一个你自己的规范。</li>
</ul>
<p>REST的本意是基于一个架构的假设（资源化），定义了一组风格，并基于这个风格形成约定、工具和支持。思路不错。但是因为他的架构假设就是有问题的，因此后续一系列东西都建立在了一个不稳固的基础之上。同时，REST并没有解决太多的实际问题。</p>
<p>是，的确，有些时候，用REST完成CRUD已经能完成任务了。此时，用REST没有什么不好的。但是，现实当中，真正的业务领域一般都会比资源的CRUD复杂的多。这时REST“基本上没解决太多实际问题”的缺点就会体现出来。我所见到的大多数情况，是会形成一种REST-like形式的接口，像REST却又不限于REST。</p>
<p>为了REST，我看到了太多的人在争执到底是POST还是PUT，到底用querystring还是body，到底用200还是201，到底一个单词应该用单数还是复数，到底一个请求参数应该放在url path的中间一段还是最后一段…… 真正要做的事情本身反而没人关心。而一旦把争论给一个“REST专家”看，他的回答八成是“其实你还是不懂REST”…</p>
<p>我觉得人生不能这么糟蹋，你觉得呢？</p>
<p>-— 附一个现实当中接口的开发的方式</p>
<p>你可以总是从REST开始，如果你要开发的东西能被自然而然的想成是一个资源。然后通过相关的工具自动生成一些代码，把这个原型和你的合作者讨论一下。这是我能想到的REST能做的一件很好的事情——快速实验。</p>
<p>然后如果你想认真的往下做，就可以彻底忘记REST这件事。开始自己定义业务接口，尽量不要在url里加变量。尽量只用GET和POST，减少一些沟通上的混乱。对于每个接口，好好定义可能发生的业务错误，并与PM一起协商怎么处理这些错误。认真的考虑认证、授权、流控等机制，当你开发的是和钱相关的业务尤其要留意。</p>
<p>最后，本文并不是说“绝对不要用REST”，而是：如果你在实际工作中用REST有了困惑，不知道某个情况下REST此时的最佳实践是什么时，不要追求“真正的REST会怎么做”，不要被REST限制住。</p>
<p>-—- 2018-12-19更新</p>
<p>感谢</p>
<p><a href="//www.zhihu.com/people/a881391b3f39dc9f33823869cba341bc" target="_blank" rel="noopener">@David Dong</a></p>
<p>的评论，基于他的评论，我写下我的感受。</p>
<p>如果看过REST最初的那篇论文<a href="https://link.zhihu.com/?target=https%3A//www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">Architectural Styles and the Design of Network-based Software Architectures</a>就会发现，当时想设计的目标是解决互联网级别的信息共享和互操作问题。而我们的大量开发者工作的主要目标是“为业务系统实现一个满足功能（比如登录，交易……）/非功能需求（比如认证，性能，可扩展性……）的接口“。并且设计接口时会区分“给第三方用的开放接口”、“给UI开发定制的接口“和“内部使用的接口”等。这些接口的设计目标都和REST当初制定的目标有差别。其中最接近的，是“开放接口”。因此可以看到有些开放接口用REST实现还是很不错的，比如github的接口，AWS S3的接口等。</p>
<p>但是其他两类接口与REST关注的点完全不一样。比如面向UI的接口的就要满足UI需要。此时资源不资源不太重要，而是尽量用少的roundtrip去返回这个界面需要的所有数据。接口是按照加载的优先级，而不是“资源”做切分。比如第一屏的显示要尽量一个接口先给出来，后续异步加载的数据可以用其他接口慢慢出。为UI提供的接口往往被划归为“大前端“的一部分。</p>
<p>而内部的接口，越接近DB的，越容易用表来mapping到“资源“，但是内部的接口需要考虑到数据整合的需要。比如底层的用户数据分为A、B、C三类，但这3个数据因为服务隔离不能直接在DB做join。需求要按照A的某个条件做排序分页，但要注入B和C的数据。这时就需要B和C提供batch读取和app注入的相关逻辑。此外还有复杂的查询条件，可动态改变的输出字段等要求。REST的“资源”概念在这里能帮上的忙有限。这也是GrpahQL尝试解决的问题。</p>
<p>再有一类问题是用接口实现分布式一致性的业务问题。比如下单+支付+扣库存+加积分问题。这时接口的形式并不重要，而能够支持实现SAGA或者TCC才是最关键的。而整个业务对外的感觉实际上是创建一个“事务”。早期一本叫做Resftul Web Services的书描述Restful接口做这个事情的方案是：</p>
<ol>
<li>调用接口创建一个事务的资源</li>
<li>拿着事务资源的id，调用步骤1接口，步骤2接口……</li>
<li>拿着事务资源的id，调用事务的commit接口</li>
</ol>
<p>这种形式不仅臃肿，还把怎么做这件事的内部细节完全暴露到了调用方，造成了耦合。而我们一般常见的做法就是一个接口POST /doSomething，然后接口实现方内部维护事务，维护commit，rollback等细节。有的时候还需要添加一些异步回调。</p>
<p>简单总结下，写接口的目标各自不同。而REST的目标是“实现互联网级别的信息共享系统”，这个目标和大部分开发者要实现的目标完全不同，这就不难解释为何照搬REST去做另一个领域的事情可能会非常别扭。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>RESTful</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>杂</title>
    <url>/2020/04/10/Cognition/</url>
    <content><![CDATA[<ul>
<li><h4 id="认知篇"><a href="#认知篇" class="headerlink" title="认知篇"></a>认知篇</h4><blockquote>
<ol>
<li>保持怀疑的态度</li>
<li>客观分析现象</li>
<li>存在即合理</li>
</ol>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>文字</category>
      </categories>
      <tags>
        <tag>杂</tag>
        <tag>认知</tag>
      </tags>
  </entry>
  <entry>
    <title>快捷键合集（自常用整理）</title>
    <url>/2020/04/07/hotkey/</url>
    <content><![CDATA[<p>鼠标是什么，能吃吗？<a id="more"></a></p>
<h3 id="Windows系统类"><a href="#Windows系统类" class="headerlink" title="Windows系统类"></a>Windows系统类</h3><ul>
<li><h4 id="资源管理器"><a href="#资源管理器" class="headerlink" title="资源管理器"></a>资源管理器</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Win+E</td>
<td>调出资源管理器</td>
</tr>
<tr>
<td>Ctrl+C</td>
<td>复制文件或文件夹</td>
</tr>
<tr>
<td>Ctrl+V</td>
<td>粘贴文件或文件夹</td>
</tr>
<tr>
<td>Ctrl+X</td>
<td>剪切文件或文件夹</td>
</tr>
<tr>
<td>Ctrl+A</td>
<td>选中全部文件和文件夹</td>
</tr>
<tr>
<td>Ctrl+F</td>
<td>激活搜索栏</td>
</tr>
<tr>
<td>Ctrl+Shift+N</td>
<td>创建文件夹</td>
</tr>
<tr>
<td>Ctrl+Shift+T</td>
<td>创建txt文件</td>
</tr>
<tr>
<td>Alt+←</td>
<td>地址后退</td>
</tr>
<tr>
<td>Alt+→</td>
<td>地址前进</td>
</tr>
<tr>
<td>Alt+D</td>
<td>激活地址栏</td>
</tr>
<tr>
<td>Alt+D, cmd</td>
<td>进入当前目录的命令提示符</td>
</tr>
<tr>
<td>Alt+↑</td>
<td>跳转至上级目录</td>
</tr>
<tr>
<td>Shift+↑ or ↓</td>
<td>选择多个文件或文件夹</td>
</tr>
<tr>
<td>Shift+F10</td>
<td>显示选定项目的快捷菜单(相当于鼠标右键)</td>
</tr>
<tr>
<td>Delete(Ctrl+D)</td>
<td>删除选中文件或文件夹</td>
</tr>
<tr>
<td>Pg Up</td>
<td>向上翻页浏览</td>
</tr>
<tr>
<td>Pg Dn</td>
<td>向下翻页浏览</td>
</tr>
<tr>
<td>Home</td>
<td>跳转至第一个文件</td>
</tr>
<tr>
<td>End</td>
<td>跳转至最后一个文件</td>
</tr>
<tr>
<td>Shift+home</td>
<td>选中激活项至第一个文件</td>
</tr>
<tr>
<td>Shift+end</td>
<td>选中激活项至最后一个文件</td>
</tr>
<tr>
<td>F2</td>
<td>重命名文件或文件夹</td>
</tr>
<tr>
<td>F5</td>
<td>刷新</td>
</tr>
<tr>
<td>Alt+F4</td>
<td>退出</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的导出与导入</title>
    <url>/2020/04/07/mysqlOperating/</url>
    <content><![CDATA[<h3 id="引出"><a href="#引出" class="headerlink" title="引出"></a>引出</h3><ul>
<li>开发环境中建好的数据库要投放到生成环境，或者交予他人开发，如何进行Mysql数据库的导出与导入？<a id="more"></a></li>
<li>一个数据库管理工具就可以解决<br>eg: <code>Workbench</code>，<code>Navicat</code>，<code>DBeaver</code>等等 不同的软件操作不同，但用用大概了解都能摸清</li>
<li>本文还是利用安装上MySQL就自带的<code>mysqldump</code>来解决，不能总是依赖这些视觉性动动鼠标的东西，MySQL相关的命令还是了解下</li>
</ul>
<h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><ul>
<li><h4 id="单表导出"><a href="#单表导出" class="headerlink" title="单表导出"></a>单表导出</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysqldump -u 账号 -p 数据库名 表名 &gt; 导出文件名.<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">password</span> ******</span><br></pre></td></tr></table></figure></li>
<li><h4 id="多表导出"><a href="#多表导出" class="headerlink" title="多表导出"></a>多表导出</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">mysqldump -u 账号 -p 数据库名 表名<span class="number">1</span> 表名<span class="number">2</span> 表名<span class="number">3</span> &gt; 导出文件名.sql</span><br><span class="line">password ******</span><br></pre></td></tr></table></figure></li>
<li><h4 id="单个数据库导出"><a href="#单个数据库导出" class="headerlink" title="单个数据库导出"></a>单个数据库导出</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysqldump -u 账号 -p 数据库名 &gt; 导出文件名.<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">password</span> ******</span><br></pre></td></tr></table></figure></li>
<li><h4 id="多个数据库导出"><a href="#多个数据库导出" class="headerlink" title="多个数据库导出"></a>多个数据库导出</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysqldump -u 账号 -p <span class="params">--all-databases</span> &gt; 导出文件名<span class="string">.sql</span></span><br><span class="line">password 输入密码</span><br></pre></td></tr></table></figure>
<code>注：</code>–all-databases 选项在 MySQL 3.23.12 及以后版本加入。<br>该方法可用于实现数据库的备份策略。</li>
</ul>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目升级node.js版本node-sass兼容问题</title>
    <url>/2020/04/06/node-sass/</url>
    <content><![CDATA[<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><blockquote>
<p><code>npm i node-sass -D</code> or <code>npm install node-sass -save-dev</code>，二者等效</p>
</blockquote>
<a id="more"></a>
<h3 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h3><ul>
<li>原先做一个Vue项目使用的node.js版本是6.11.3，而后Hexo博客需要的node.js的版本是10+，于是更新node.js版本到了10.16.0</li>
<li>再次启动Vue项目，那么问题就来了<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">Module build failed: Error: <span class="keyword">Node</span> <span class="title">Sass</span> does not yet support your</span><br><span class="line">current environment: Windows </span><br><span class="line"><span class="number">64</span>-bit with Unsupported runtime (<span class="number">64</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul>
<li>从node.js官网<a href="https://nodejs.org/zh-cn/download/releases/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/releases/</a><br>可以查询到版本信息<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.loli.net/2020/04/06/fTQFKI5pGjMPHEs.png" alt="node.js版本信息" title="">
                </div>
                <div class="image-caption">node.js版本信息</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.loli.net/2020/04/06/s2RISFOXixc8hH1.png" alt="node.js版本信息" title="">
                </div>
                <div class="image-caption">node.js版本信息</div>
            </figure>
到10的版本NODE_MODULE_VERSION变成了64</li>
<li>从node-sass的GitHub项目地址可以查询到node-sass的版本信息<br><a href="https://github.com/sass/node-sass/releases/tag/v4.7.2" target="_blank" rel="noopener">https://github.com/sass/node-sass/releases/tag/v4.7.2</a><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.loli.net/2020/04/06/Azn7DtlSuc3JiNj.png" alt="node-sass版本信息" title="">
                </div>
                <div class="image-caption">node-sass版本信息</div>
            </figure>
显然，这就是不兼容的原因</li>
</ul>
<h3 id="问题解决的引申"><a href="#问题解决的引申" class="headerlink" title="问题解决的引申"></a>问题解决的引申</h3><ul>
<li>npm install xxx –save -dev 的xxx组件依赖，会保存到package.json中的devDependencies对象下。</li>
<li>npm install xxx –save 的xxx组件依赖，会保存到package.json中的dependencies对象下。</li>
<li>当你在npm install 时，会自动加载devDependencies对象和dependencies对象下依赖。</li>
<li>当你在npm install packagename时，会自动加载dependencies对象下依赖。</li>
<li>当你在npm install packagename -dev时，会自动加载devDependencies对象下依赖。</li>
</ul>
]]></content>
      <categories>
        <category>纠错</category>
      </categories>
      <tags>
        <tag>node.js</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/2020/02/26/IDEA/</url>
    <content><![CDATA[<h3 id="IDEA-快捷键汇总"><a href="#IDEA-快捷键汇总" class="headerlink" title="IDEA 快捷键汇总"></a>IDEA 快捷键汇总</h3><a id="more"></a>

<p>Ctrl+Shift + Enter，语句完成<br>“！”，否定完成，输入表达式时按 “！”键<br>Ctrl+E，最近的文件<br>Ctrl+Shift+E，最近更改的文件<br>Shift+Click，可以关闭文件<br>Ctrl+[ OR ]，可以跑到大括号的开头与结尾<br>Ctrl+F12，可以显示当前文件的结构<br>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择<br>Ctrl+N，可以快速打开类<br>Ctrl+Shift+N，可以快速打开文件<br>Alt+Q，可以看到当前方法的声明<br>Ctrl+P，可以显示参数信息<br>Ctrl+Shift+Insert，可以选择剪贴板内容并插入<br>Alt+Insert，可以生成构造器/Getter/Setter等<br>Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义<br>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch<br>Ctrl+Enter，导入包，自动修正<br>Ctrl+Alt+L，格式化代码<br>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作<br>Ctrl+Alt+O，优化导入的类和包<br>Ctrl+R，替换文本<br>Ctrl+F，查找文本<br>Ctrl+Shift+Space，自动补全代码<br>Ctrl+空格，代码提示（与系统输入法快捷键冲突）<br>Ctrl+Shift+Alt+N，查找类中的方法或变量<br>Alt+Shift+C，最近的更改<br>Alt+Shift+Up/Down，上/下移一行<br>Shift+F6，重构 – 重命名<br>Ctrl+X，删除行<br>Ctrl+D，复制行<br>Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）<br>Ctrl+J，自动代码（例如：serr）<br>Ctrl+Alt+J，用动态模板环绕<br>Ctrl+H，显示类结构图（类的继承层次）<br>Ctrl+Q，显示注释文档<br>Alt+F1，查找代码所在位置<br>Alt+1，快速打开或隐藏工程面板<br>Ctrl+Alt+left/right，返回至上次浏览的位置<br>Alt+left/right，切换代码视图<br>Alt+Up/Down，在方法间快速移动定位<br>Ctrl+Shift+Up/Down，向上/下移动语句<br>F2 或 Shift+F2，高亮错误或警告快速定位<br>Tab，代码标签输入完成后，按 Tab，生成代码<br>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失<br>Alt+F3，逐个往下查找相同文本，并高亮显示<br>Ctrl+Up/Down，光标中转到第一行或最后一行下<br>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）<br>Ctrl+Alt+B，跳转到方法实现处<br>Ctrl+Shift+Backspace，跳转到上次编辑的地方<br>Ctrl+O，重写方法<br>Ctrl+Alt+Space，类名自动完成<br>Ctrl+Alt+Up/Down，快速跳转搜索结果<br>Ctrl+Shift+J，整合两行<br>Alt+F8，计算变量值<br>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本<br>Ctrl+Alt+Shift+V，简单粘贴<br>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口<br>F12，把焦点从编辑器移到最近使用的工具窗口<br>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器<br>Ctrl+W，可以选择单词继而语句继而行继而函数<br>Ctrl+Shift+W，取消选择光标所在词<br>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置<br>Ctrl+I，实现方法<br>Ctrl+Shift+U，大小写转化<br>Ctrl+Y，删除当前行</p>
<p>Shift+Enter，向下插入新行<br>psvm/sout，main/System.out.println(); Ctrl+J，查看更多<br>Ctrl+Shift+F，全局查找<br>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找<br>Ctrl+Shift+S，高级搜索<br>Ctrl+U，转到父类<br>Ctrl+Alt+S，打开设置对话框<br>Alt+Shift+Inert，开启/关闭列选择模式<br>Ctrl+Alt+Shift+S，打开当前项目/模块属性<br>Ctrl+G，定位行<br>Alt+Home，跳转到导航栏<br>Ctrl+Enter，上插一行<br>Ctrl+Backspace，按单词删除<br>Ctrl+”+/-”，当前方法展开、折叠<br>Ctrl+Shift+”+/-”，全部展开、折叠<br>【调试部分、编译】<br>Ctrl+F2，停止<br>Alt+Shift+F9，选择 Debug<br>Alt+Shift+F10，选择 Run<br>Ctrl+Shift+F9，编译<br>Ctrl+Shift+F10，运行<br>Ctrl+Shift+F8，查看断点<br>F8，步过<br>F7，步入<br>Shift+F7，智能步入<br>Shift+F8，步出<br>Alt+Shift+F8，强制步过<br>Alt+Shift+F7，强制步入<br>Alt+F9，运行至光标处<br>Ctrl+Alt+F9，强制运行至光标处<br>F9，恢复程序<br>Alt+F10，定位到断点<br>Ctrl+F8，切换行断点<br>Ctrl+F9，生成项目<br>Alt+1，项目<br>Alt+2，收藏<br>Alt+6，TODO<br>Alt+7，结构<br>Ctrl+Shift+C，复制路径<br>Ctrl+Alt+Shift+C，复制引用，必须选择类名<br>Ctrl+Alt+Y，同步<br>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）<br>Shift+F12，还原默认布局<br>Ctrl+Shift+F12，隐藏/恢复所有窗口<br>Ctrl+F4，关闭<br>Ctrl+Shift+F4，关闭活动选项卡<br>Ctrl+Tab，转到下一个拆分器<br>Ctrl+Shift+Tab，转到上一个拆分器<br>【重构】<br>Ctrl+Alt+Shift+T，弹出重构菜单<br>Shift+F6，重命名<br>F6，移动<br>F5，复制<br>Alt+Delete，安全删除<br>Ctrl+Alt+N，内联<br>【查找】<br>Ctrl+F，查找<br>Ctrl+R，替换<br>F3，查找下一个<br>Shift+F3，查找上一个<br>Ctrl+Shift+F，在路径中查找<br>Ctrl+Shift+R，在路径中替换<br>Ctrl+Shift+S，搜索结构<br>Ctrl+Shift+M，替换结构<br>Alt+F7，查找用法<br>Ctrl+Alt+F7，显示用法<br>Ctrl+F7，在文件中查找用法<br>Ctrl+Shift+F7，在文件中高亮显示用法</p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一言</title>
    <url>/2020/02/04/word_day/</url>
    <content><![CDATA[<script src="https://unpkg.com/axios/dist/axios.min.js">
</script>
<h2 id="每日一言-更新"><a href="#每日一言-更新" class="headerlink" title="每日一言 更新"></a>每日一言 <span class = "today" id = "today"></span>更新</h2>  <br>

<ul>
<li><h3 id=""><a href="#" class="headerlink" title=""></a><span id = "author1"></span></h3><h4 id="-1"><a href="#-1" class="headerlink" title=""></a><span id = "content1"></span></h4><br>
<script type="text/javascript" src="/js/today_min.js"></script>
<script src="/js/word_day.js"></script>
<a id="more"></a>   </li>
<li><h3 id="-2"><a href="#-2" class="headerlink" title=""></a><span id = "author2"></span></h3><h4 id="-3"><a href="#-3" class="headerlink" title=""></a><span id = "content2"></span></h4><h4 id="-4"><a href="#-4" class="headerlink" title=""></a><span id = "content_en2"></span></h4><br>
</li>
<li><h3 id="-5"><a href="#-5" class="headerlink" title=""></a><span id = "author3"></span></h3><h4 id="-6"><a href="#-6" class="headerlink" title=""></a><span id = "content3"></span></h4><h4 id="-7"><a href="#-7" class="headerlink" title=""></a><span id = "content_en3"></span></h4></li>
</ul>
<script src="/js/showpic.js"></script>]]></content>
      <categories>
        <category>文字</category>
      </categories>
      <tags>
        <tag>每日一言</tag>
      </tags>
  </entry>
  <entry>
    <title>Bing每日壁纸（每日更新）</title>
    <url>/2020/02/01/bingpaper/</url>
    <content><![CDATA[<h2 id="Bing壁纸-每日更新"><a href="#Bing壁纸-每日更新" class="headerlink" title="Bing壁纸(每日更新)  "></a>Bing壁纸(每日更新)  <span class = "date" id = "date"></span></h2><a id="more"></a>
<p><img src = "" id = "picshow" 
onerror="this.src='https://api.berryapi.net/?service=App.Bing.Images&day=-0';this.οnerrοr=null"></p>
<p><a href="javascript:void(0)" style = "width:50%;text-decoration: none;" onclick = beforeday()>&lt; 前一天</a><a href="javascript:void(0)" style = "float:right;text-decoration: none;" onclick = nextday()>后一天 &gt;</a></p>
<blockquote>
<p><a href="/Bing/">Bing壁纸汇总</a></p>
</blockquote>
<script type="text/javascript" src="/js/bingday_1.2_min.js"></script>]]></content>
      <categories>
        <category>置顶</category>
      </categories>
      <tags>
        <tag>壁纸</tag>
        <tag>Bing</tag>
      </tags>
  </entry>
  <entry>
    <title>ICARUS主题更换问题</title>
    <url>/2020/01/29/icaruserror/</url>
    <content><![CDATA[<!-- *本文链接地址：* [https://ccsubia.github.io/2020/01/29/icaruserror/](https://ccsubia.github.io/2020/01/29/icaruserror/) -->

<h3 id="发现错误"><a href="#发现错误" class="headerlink" title="发现错误"></a>发现错误</h3><ul>
<li>下载更换ICARUS主题后，重新执行<code>hexo serve</code>命令，发现报错<a id="more"></a>如下<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ERROR </span>Package cheerio is not installed.  </span><br><span class="line"><span class="keyword">ERROR </span>Please install the missing dependencies from the root directory of your Hexo site.</span><br></pre></td></tr></table></figure>
<!--more-->

</li>
</ul>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ul>
<li><p>原因是缺少<code>cheerio</code>依赖，进入<code>blog-hexo</code>目录，执行<code>npm i cheerio -S</code>命令进行安装即可，<code>-S</code>指安装并将其保存到当前项目的配置中，下次就会统一安装了。</p>
</li>
<li><p>重新执行<code>hexo serve</code>命令，发现如下信息</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">INFO</span>  Checking dependencies  </span><br><span class="line"><span class="builtin-name">INFO</span>  Validating the configuration file  </span><br><span class="line">WARN  themes/icarus/\_config.yml is <span class="keyword">not</span> found. We are creating one <span class="keyword">for</span> you<span class="built_in">..</span>.  </span><br><span class="line"><span class="builtin-name">INFO</span>  themes/icarus/\_config.yml is created. Please restart Hexo <span class="keyword">to</span> apply changes.</span><br></pre></td></tr></table></figure>
</li>
<li><p>提示缺少<code>themes/icarus/_config.yml</code>文件，已经帮助我们生成，再次运行即可正常启动。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>纠错</category>
      </categories>
      <tags>
        <tag>ICARUS</tag>
        <tag>博客主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Git代理设置</title>
    <url>/2020/01/29/gitproxy/</url>
    <content><![CDATA[<!-- *本文链接地址：* [https://ccsubia.github.io/2020/01/29/gitproxy/](./2020/01/29/gitproxy/) -->
<h3 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h3><ul>
<li>代理服务器</li>
<li>代理软件<a id="more"></a>

</li>
</ul>
<h3 id="2-代理服务器"><a href="#2-代理服务器" class="headerlink" title="2. 代理服务器"></a>2. 代理服务器</h3><ul>
<li><p>打开代理软件，连接上代理服务器</p>
</li>
<li><p>确定代理软件的占用端口，一般默认<code>1080端口</code> 今天突然发现蛇皮了，将鼠标移动到小图标会显示出端口号</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/pasted-2.png" alt="upload successful" title="">
                </div>
                <div class="image-caption">upload successful</div>
            </figure></li>
<li><p>如果你用的其他代理软件，不知道端口号是多少，可用下面方法查看<br>1.打开设备管理器，找到代理软件的详细信息确认PID<br>  <img src="https://i.loli.net/2020/01/29/MqwgAa9FHYsjmNI.png" alt="pid"><br>2.<code>CMD</code>打开命令行，查看端口占用信息,使用<code>netstat -ano</code>命令即可查看全部端口占用信息</p>
<p>3.<code>Ctrl</code>+<code>F</code>查找之前找到的PID，确认占用端口<br>  <img src="https://i.loli.net/2020/01/29/uzPsYNweKmcBOQJ.png" alt="port"></p>
</li>
</ul>
<h3 id="3-设置git代理"><a href="#3-设置git代理" class="headerlink" title="3. 设置git代理"></a>3. 设置git代理</h3><ul>
<li>打开<code>Git Bash</code></li>
<li>设置代理</li>
</ul>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全局设置</span></span><br><span class="line">git config <span class="params">--global</span> http.proxy socks5:<span class="string">//127.0.0.1</span><span class="function">:1080</span></span><br><span class="line">git config <span class="params">--global</span> https.proxy https:<span class="string">//127.0.0.1</span><span class="function">:1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#只对github.com代理</span></span><br><span class="line">git config <span class="params">--global</span> http.https:<span class="string">//github.com.proxy</span> socks5:<span class="string">//127.0.0.1</span><span class="function">:1080</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 本次设置</span></span><br><span class="line">git clone https:<span class="string">//github.com/example/example.git</span> <span class="params">--config</span> <span class="string">"http.proxy=127.0.0.1:1080"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>取消设置代理</li>
</ul>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取消全局代理</span></span><br><span class="line">git config --<span class="keyword">global</span> --<span class="keyword">unset</span> <span class="keyword">http</span>.proxy</span><br><span class="line">git config --<span class="keyword">global</span> --<span class="keyword">unset</span> https.proxy</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm config delete proxy</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 取消github.com代理</span></span><br><span class="line">git config --<span class="keyword">global</span> --<span class="keyword">unset</span> <span class="keyword">http</span>.https://github.com.proxy</span><br></pre></td></tr></table></figure>

<h3 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4.测试结果"></a>4.测试结果</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/pasted-5.png" alt="代理测试" title="">
                </div>
                <div class="image-caption">代理测试</div>
            </figure>
<p>成功！！</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>哔哩哔哩(bilibili)视频下载-支持4K</title>
    <url>/2020/01/20/bilibili/</url>
    <content><![CDATA[<!-- *本文链接地址：* [https://ccsubia.github.io/2020/01/20/bilibili/](https://ccsubia.github.io/2020/01/20/bilibili/) -->
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>小破站现在支持了4K清晰度了，作为没有4K显示器的我然而并体验不出区别，但我就是喜欢 屯</p>
<h3 id="准备阶段–安装著名的下载器IDM"><a href="#准备阶段–安装著名的下载器IDM" class="headerlink" title="准备阶段–安装著名的下载器IDM"></a>准备阶段–安装著名的下载器IDM</h3><p>  下载链接: <a href="https://www.internetdownloadmanager.com/" target="_blank" rel="noopener">官方链接</a>  <a href="https://hu.zenith.workers.dev/IDM%206.36.2/" target="_blank" rel="noopener">个人云盘链接</a></p>
<p>  安装教程不多说了，个人云盘版文件集成了浏览器插件（插件特别重要）<a id="more"></a></p>
<h3 id="正式阶段–前往小破站下载"><a href="#正式阶段–前往小破站下载" class="headerlink" title="正式阶段–前往小破站下载"></a>正式阶段–前往小破站下载</h3><p>浏览器正常浏览小破站，找到需要下载视频页面，在视频页面右上角会出现IDM的下载浮窗，如下图所示（如果看不到这个悬浮窗请<code>刷新页面</code>或<code>重启浏览器</code>或<code>更换浏览器</code>,建议使用<code>Chrome</code>，还是没有可能是你的插件没有安装好，或者是由于之前有过一些我不知道的操作，请自行解决没有请刷新页面或自己发动聪明的大脑解决）</p>
<p>  <img src="https://i.loli.net/2020/01/20/JSmhNRAYHUlWDaI.png" alt=""></p>
<p>点击下载该视频，如果下载的视频是<code>FLV</code>格式的则即刻直接下载(一般B站默认是使用H5播放器，如果你是IE老用户，大部分视频在此下载只有<code>MP4</code>格式，只有小部分视频会在H5播放器中提供出<code>FLV</code>格式下载)</p>
<p>此时需要确定你的浏览器使用的播放器（H5/flash，在B站播放页面鼠标移动到设置就能看到）如下：</p>
<p>  <img src="https://i.loli.net/2020/01/20/27jI6cNguQaA3Yr.png" alt=""></p>
<p>如果是H5播放器，由于B站的一般音视频是分隔开来的，此时下载的<code>MP4</code>格式视频是没有声音的（反正我的是没有），<code>切换为flash播放器</code>，此时你能下载的最大分辨率只有1080+的<code>FLV</code>格式的视频文件，但下载的视频文件是有声音的(这样就很Nice).</p>
<h3 id="进阶阶段–4K分辨率视频下载"><a href="#进阶阶段–4K分辨率视频下载" class="headerlink" title="进阶阶段–4K分辨率视频下载"></a>进阶阶段–4K分辨率视频下载</h3><p><code>如果视频没有4K画质或你主观不需要4K，到这就可以结束了</code></p>
<p><code>如果没有大会员也可以到这结束了</code></p>
<p>切换为H5播放器，刷新页面可选择<code>4K</code>分辨率视频下载（前提当然是你有<code>大会员</code>），经由本人测试，使用<code>IDM</code>下载只能找到大部分不具有<code>4K</code>分辨率的视频对应的音频文件，具有<code>4K</code>分辨率的视频利用<code>IDM</code>无法找到小破站的音频单独文件</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.loli.net/2020/01/22/XYkjHbi3a1cKJgf.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.loli.net/2020/01/22/P7qhQuHmElnFU1S.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

<p>现在就只能走一点弯路了，就是提取出之前的<code>FLV</code>格式的视频中的音频</p>
<p>  在线视频提取音频地址：<a href="http://www.bejson.com/convert/video2audio/" target="_blank" rel="noopener">http://www.bejson.com/convert/video2audio/</a></p>
<p>  最后再进行一次音视频合并，音视频合并的文件可在网盘下载<br>  视频合并需要ffmpeg的支持，可前往官网下载全局安装<br>  <a href="https://www.ffmpeg.org/download.html/" target="_blank" rel="noopener">https://www.ffmpeg.org/download.html/</a></p>
<p>  似乎也可以只下载我网盘里的<code>.exe</code>文件，与<code>.bat</code>文件在同一文件夹目录下就可以</p>
<h4 id="自主创建-bat文件："><a href="#自主创建-bat文件：" class="headerlink" title="自主创建.bat文件："></a>自主创建<code>.bat</code>文件：</h4><p>  1.本地创建一个txt文件<br>  2.输入如下代码</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">title</span> 音视频合并</span><br><span class="line"><span class="built_in">echo</span> 个人博客网站：[url]https://ccsubia.github.io/[/url]</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">set</span> /p audio=请将【音频】文件拖拽到此处，按下回车确认：</span><br><span class="line"><span class="built_in">set</span> /p video=请将【视频】文件拖拽到此处，按下回车确认：</span><br><span class="line">ffmpeg.exe -i <span class="variable">%audio%</span> -i <span class="variable">%video%</span> -acodec <span class="built_in">copy</span> -vcodec <span class="built_in">copy</span> <span class="variable">%video%</span>.mp4</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> 合并结束！</span><br><span class="line"><span class="built_in">echo</span> 文件已经输出到本地原视频所在文件夹。</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

<p>3.另存为<code>.bat</code>文件（注意编码方式选择ANSI，否则会出现中文乱码）<br>4.双击<code>.bat</code>文件，拖入音频和视频文件，回车<br>5.结束</p>
]]></content>
      <categories>
        <category>影视</category>
      </categories>
      <tags>
        <tag>bilibili</tag>
        <tag>4K</tag>
      </tags>
  </entry>
</search>
